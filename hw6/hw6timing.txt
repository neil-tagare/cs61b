1a. Results for InsertRandomSpeedTest for N = 1000000:
Inserting 1000000 random length 10 Strings into a StringSet of type BSTStringSet
Took: 0.92 sec.

Inserting 1000000 random length 10 Strings into a StringSet of type ECHashStringSet
Took: 0.81 sec.

Inserting 1000000 random length 10 Strings into a StringSet of type java.util.TreeSet
Took: 1.02 sec.

Inserting 1000000 random length 10 Strings into a StringSet of type java.util.HashSet
Took: 0.38 sec.

1b. Results for InsertRandomSpeedTest for N = 2000000:
Inserting 2000000 random length 10 Strings into a StringSet of type BSTStringSet
Took: 2.13 sec.

Inserting 2000000 random length 10 Strings into a StringSet of type ECHashStringSet
Took: 2.00 sec.

Inserting 2000000 random length 10 Strings into a StringSet of type java.util.TreeSet
Took: 2.53 sec.

Inserting 2000000 random length 10 Strings into a StringSet of type java.util.HashSet
Took: 0.69 sec.

1c. Does your ECHashStringSet look roughly linear or roughly quadratic
in its scaling behavior for random strings?
It looks roughly linear in its scaling behavior for random strings since the runtime
for N=2000000 is about two times of the runtime for N=1000000;



2a. Results for InsertInOrderSpeedTest for N = 10000:
Inserting 10000 in-order strings into a StringSet of type BSTStringSet
Took: 0.47 sec.

Inserting 10000 in-order strings into a StringSet of type ECHashStringSet
Took: 0.02 sec.

Inserting 10000 in-order strings Strings into a StringSet of type java.util.TreeSet
Took: 0.00 sec.

Inserting 10000 in-order strings Strings into a StringSet of type java.util.HashSet
Took: 0.02 sec.



2b. Results for InsertInOrderSpeedTest for N = 20000:
Inserting 20000 in-order strings into a StringSet of type BSTStringSet
Took: 1.34 sec.

Inserting 20000 in-order strings into a StringSet of type ECHashStringSet
Took: 0.05 sec.

Inserting 20000 in-order strings Strings into a StringSet of type java.util.TreeSet
Took: 0.02 sec.

Inserting 20000 in-order strings Strings into a StringSet of type java.util.HashSet
Took: 0.02 sec.

2c. Does your **BST**StringSet look roughly linear or roughly
quadratic in its scaling behavior for in order strings?
The BST string set has roughly linear scaling in its behavior since the runtime for N=20000 is
about 2.85 times than that for N=10000; and i also tested for N=40000, it is roughtly 4 times
than that of N=10000;

Before submitting, make sure that your ECHashStringSet is capable of
handling inputs of size 1000000 in a reasonable amount of time (a few
seconds).

